---
title: "stats506hw3"
author: "Qichang Wan"
format:
  html:
    code-fold: true
    code-summary: "Show the code"
    embed-resources: true
editor: visual
---

Link to github: https://github.com/Tealeaf2001/stats-506-hw3.git

## Problem 1

### (a)

```{r}
library(Hmisc)
VIX_D <- sasxport.get('VIX_D.XPT')
DEMO_D <- sasxport.get('DEMO_D.XPT')
#str(VIX_D)
#str(DEMO_D)

# Merge the datasets by the SEQN variable, keeping only matched records
merged_data <- merge(VIX_D, DEMO_D, by = "seqn")

# Check the number of matched records
total_sample_size <- nrow(merged_data)
print(total_sample_size)

```

### (b)
```{r}
# Create age brackets
merged_data$age_bracket <- cut(merged_data$ridageyr, 
                               breaks = seq(0, 100, by = 10), 
                               right = FALSE, 
                               labels = c("0-9", "10-19", "20-29", "30-39", 
                                          "40-49", "50-59", "60-69", "70-79", 
                                          "80-89", "90-99"))


results <- data.frame(age_bracket = levels(merged_data$age_bracket), 
                      total_respondents = numeric(length(levels(merged_data$age_bracket))), 
                      wear_glasses_contacts = numeric(length(levels(merged_data$age_bracket))), 
                      proportion = numeric(length(levels(merged_data$age_bracket))))


for (i in 1:length(levels(merged_data$age_bracket))) {
  age_group <- levels(merged_data$age_bracket)[i]
  

  age_group_data <- merged_data[merged_data$age_bracket == age_group, ]
  

  total_respondents <- nrow(age_group_data)
  

  wear_glasses_contacts <- sum(age_group_data$viq220 == 1, na.rm = TRUE)
  

  proportion <- if (total_respondents > 0) {
    wear_glasses_contacts / total_respondents
  } else {
    NA
  }
  

  results[i, "total_respondents"] <- total_respondents
  results[i, "wear_glasses_contacts"] <- wear_glasses_contacts
  results[i, "proportion"] <- proportion
}


print(results)


```
```{r}

library(knitr)
library(kableExtra)

kable(results, format = "html", digits = 2, 
      col.names = c("Age Bracket", "Total Respondents", "Wearing Glasses/Contacts", "Proportion")) %>%
  kable_styling(full_width = FALSE, position = "center")

```
### (c)
```{r}
merged_data$viq220 <- ifelse(merged_data$viq220 == 1, 1, 
                             ifelse(merged_data$viq220 == 2, 0, NA))


clean_data <- merged_data[!is.na(merged_data$viq220), ]

model1 <- glm(viq220 ~ ridageyr, data = clean_data, family = binomial)

model2 <- glm(viq220 ~ ridageyr + ridreth1 + riagendr, data = clean_data, family = binomial)

model3 <- glm(viq220 ~ ridageyr + ridreth1 + riagendr + indfmpir, data = clean_data, family = binomial)


library(broom)  


summary1 <- summary(model1)
summary2 <- summary(model2)
summary3 <- summary(model3)


odds_ratio1 <- exp(coef(model1))
odds_ratio2 <- exp(coef(model2))
odds_ratio3 <- exp(coef(model3))


pseudo_r2_1 <- 1 - (model1$deviance / model1$null.deviance)
pseudo_r2_2 <- 1 - (model2$deviance / model2$null.deviance)
pseudo_r2_3 <- 1 - (model3$deviance / model3$null.deviance)


n1 <- nobs(model1)
n2 <- nobs(model2)
n3 <- nobs(model3)


aic1 <- AIC(model1)
aic2 <- AIC(model2)
aic3 <- AIC(model3)


results <- data.frame(
  Model = c("Model 1: Age", "Model 2: Age, Race, Gender", "Model 3: Age, Race, Gender, PIR"),
  Sample_Size = c(n1, n2, n3),
  Pseudo_R2 = c(pseudo_r2_1, pseudo_r2_2, pseudo_r2_3),
  AIC = c(aic1, aic2, aic3),
  Age_Odds_Ratio = c(odds_ratio1["ridageyr"], odds_ratio2["ridageyr"], odds_ratio3["ridageyr"]),
  Race_Odds_Ratio = c(NA, odds_ratio2["ridreth1"], odds_ratio3["ridreth1"]),
  Gender_Odds_Ratio = c(NA, odds_ratio2["riagendr"], odds_ratio3["riagendr"]),
  PIR_Odds_Ratio = c(NA, NA, odds_ratio3["indfmpir"])
)


print(results)


library(knitr)
library(kableExtra)

kable(results, format = "html", digits = 3, 
      col.names = c("Model", "Sample Size", "Pseudo R^2", "AIC", 
                    "Age Odds Ratio", "Race Odds Ratio", "Gender Odds Ratio", 
                    "Poverty Income Ratio Odds Ratio")) %>%
  kable_styling(full_width = FALSE, position = "center")

```
### (d)
```{r}
summary_model3 <- summary(model3)

p_value_gender <- summary_model3$coefficients[4, 4]

p_value_gender

```
the odds of wearing glasses/contact lenses are different between men and women.

```{r}
men_data <- subset(clean_data, riagendr == 1)  
women_data <- subset(clean_data, riagendr == 2)  

p_men <- mean(men_data$viq220 , na.rm = TRUE)
p_women <- mean(women_data$viq220 , na.rm = TRUE)

n_men <- nrow(men_data)
n_women <- nrow(women_data)

prop_test <- prop.test(x = c(sum(men_data$viq220), sum(women_data$viq220)),n = c(n_men, n_women), correct = FALSE)

# Display test result
prop_test

```
p-value < 0.05, the proportion of wearers of glasses/contact lenses for distance vision differs between men and women


## Problem 2
```{r}
library(DBI)

sakila <- dbConnect(RSQLite::SQLite(), "sakila_master.db")
dbListTables(sakila)
```

### (a)
```{r}
dbGetQuery(sakila, "
SELECT release_year, COUNT(*) as movie_count
FROM film
GROUP BY release_year
ORDER BY release_year ASC
LIMIT 1;
")

```

### (b)
(1)R approach
```{r}
film <- dbGetQuery(sakila, "SELECT * FROM film_category")
cat <- dbGetQuery(sakila, "SELECT * FROM category")
catcount <- table(film$category_id)
mincat <- which.min(catcount)
c(cat$name[cat$category_id == mincat], catcount[mincat])
```
(2)single query
```{r}
dbGetQuery(sakila, "
SELECT c.name, count(c.category_id) AS count
FROM category as c
RIGHT JOIN film_category AS film ON film.category_id = c.category_id
GROUP BY c.category_id
ORDER by count
LIMIT 1
")
```
### (c) 
(1)R approach
```{r}
#get dataframe
customer <- dbGetQuery(sakila, "SELECT * FROM customer")
address <- dbGetQuery(sakila, "SELECT * FROM address")
city <- dbGetQuery(sakila, "SELECT * FROM city")
country <- dbGetQuery(sakila, "SELECT * FROM country")

cities <- address$city_id[match(customer$address_id, address$address_id)]
countries <- city$country_id[match(cities, city$city_id)]
exactcountries <- table(country$country[match(countries, country$country_id)])
exactcountries[exactcountries == 13]

```
(2)single query
```{r}
dbGetQuery(sakila, "
SELECT coun.country, count(coun.country) AS count
FROM country AS coun
RIGHT JOIN
(SELECT country_id
FROM city AS ci
RIGHT JOIN
(SELECT city_id
FROM customer AS cu
LEFT JOIN address AS a ON cu.address_id = a.address_id
) AS ca ON ca.city_id = ci.city_id
) AS ccc ON ccc.country_id = coun.country_id
GROUP BY coun.country
HAVING count == 13")
```

## Problem 3

```{r}
dat <- read.csv("us-500.csv")
```

### (a)
```{r}
length(dat$email[grepl("com$", dat$email)])/nrow(dat)
```

### (b)
```{r}
emails <- strsplit(dat$email, "@")
username <- sapply(emails, "[[", 1)
username_nonalphanumeric <- grepl("[^a-zA-Z0-9]", username)

domains <- sapply(emails, "[[", 2)
domains <- gsub("\\.[a-z]{3}", "", domains)
domains_nonalphanumeric <- grepl("[^a-zA-Z0-9]", domains)
mean(username_nonalphanumeric | domains_nonalphanumeric)
```

### (c)
```{r}
phone1area <- substr(dat$phone1, 1, 3)
phone2area <- substr(dat$phone2, 1, 3)
sort(table(c(phone1area, phone2area)), decreasing = T)[1:5]
```

### (d)
```{r}
apartment <- dat$address[grepl("[0-9]+$", dat$address)]
number <- regmatches(apartment, regexpr("[0-9]+$", apartment))
hist(log(as.numeric(number)), main = 'histogram of the log of the apartment numbers')
```

### (e)
```{r}
table(substr(number, 1, 1))
```
This is not the decreasing distribution under Benford's law. The data is not real.


